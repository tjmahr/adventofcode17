% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/day17.R
\name{day17}
\alias{day17}
\alias{spinlock}
\alias{fast_spinlock_after_zero}
\alias{get_spinlock_value_after_last_insertion}
\title{Day 17: Spinlock}
\usage{
spinlock(offset, insertions)

fast_spinlock_after_zero(offset, insertions)

get_spinlock_value_after_last_insertion(xs)
}
\arguments{
\item{offset}{initial jump size}

\item{insertions}{number of cycles to perform}

\item{xs}{a sequence generated by a spinlock}
}
\description{
\href{http://adventofcode.com/2017/day/17}{Spinlock}
}
\details{
\strong{Part One}

Suddenly, whirling in the distance, you notice what looks like a
massive, pixelated hurricane:
a deadly \href{https://en.wikipedia.org/wiki/Spinlock}{spinlock}. This
spinlock isn't just consuming computing power, but memory, too; vast,
digital mountains are being ripped from the ground and consumed by the
vortex.

If you don't move quickly, fixing that printer will be the least of your
problems.

This spinlock's algorithm is simple but efficient, quickly consuming
everything in its path. It starts with a circular buffer containing only
the value \code{0}, which it marks as the \emph{current position}. It then steps
forward through the circular buffer some number of steps (your puzzle
input) before inserting the first new value, \code{1}, after the value it
stopped on. The inserted value becomes the \emph{current position}. Then, it
steps forward from there the same number of steps, and wherever it
stops, inserts after it the second new value, \code{2}, and uses that as the
new \emph{current position} again.

It repeats this process of \emph{stepping forward}, \emph{inserting a new value},
and \emph{using the location of the inserted value as the new current
position} a total of \code{2017} times, inserting \code{2017} as its final
operation, and ending with a total of \code{2018} values (including \code{0}) in
the circular buffer.

For example, if the spinlock were to step \code{3} times per insert, the
circular buffer would begin to evolve like this (using parentheses to
mark the current position after each iteration of the algorithm):
\itemize{
\item \code{(0)}, the initial state before any insertions.
\item \code{0 (1)}: the spinlock steps forward three times (\code{0}, \code{0}, \code{0}), and
then inserts the first value, \code{1}, after it. \code{1} becomes the current
position.
\item \code{0 (2) 1}: the spinlock steps forward three times (\code{0}, \code{1}, \code{0}),
and then inserts the second value, \code{2}, after it. \code{2} becomes the
current position.
\item \code{0  2 (3) 1}: the spinlock steps forward three times (\code{1}, \code{0},
\code{2}), and then inserts the third value, \code{3}, after it. \code{3} becomes
the current position.
}

And so on:
\itemize{
\item \code{0  2 (4) 3  1}
\item \code{0 (5) 2  4  3  1}
\item \code{0  5  2  4  3 (6) 1}
\item \code{0  5 (7) 2  4  3  6  1}
\item \code{0  5  7  2  4  3 (8) 6  1}
\item \code{0 (9) 5  7  2  4  3  8  6  1}
}

Eventually, after 2017 insertions, the section of the circular buffer
near the last insertion looks like this:\preformatted{1512  1134  151 (2017) 638  1513  851
}

Perhaps, if you can identify the value that will ultimately be \emph{after}
the last value written (\code{2017}), you can short-circuit the spinlock. In
this example, that would be \code{638}.

\emph{What is the value after \code{2017}} in your completed circular buffer?

\strong{Part Two}

The spinlock does not short-circuit. Instead, it gets \emph{more} angry. At
least, you assume that's what happened; it's spinning significantly
faster than it was a moment ago.

You have good news and bad news.

The good news is that you have improved calculations for how to stop the
spinlock. They indicate that you actually need to identify \emph{the value
after \code{0}} in the current state of the circular buffer.

The bad news is that while you were determining this, the spinlock has
just finished inserting its fifty millionth value (\code{50000000}).

\emph{What is the value after \code{0}} the moment \code{50000000} is inserted?
}
\examples{
spinlock(3, 9)
fast_spinlock_after_zero(3, 10000)
}
