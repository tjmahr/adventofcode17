% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/day21.R
\name{matrix_to_string}
\alias{matrix_to_string}
\alias{string_to_matrix}
\alias{expand_rule}
\alias{enhance_matrix}
\title{Day 21: Fractal Art}
\usage{
matrix_to_string(m)

string_to_matrix(string)

expand_rule(rule_string)

enhance_matrix(m, rules)
}
\arguments{
\item{m}{a matrix
rules <- c(
"../.# => ##./#../...",
".#./..#/### => #..#/..../..../#..#")

rules <- rules %>%
lapply(expand_rule) %>%
unlist()

seed <- ".#./..#/###" %>%
string_to_matrix()

step1 <- enhance_matrix(seed, rules)

matrix_to_string(step1)

step2 <- enhance_matrix(step1, rules)
matrix_to_string(step2)}

\item{string}{a string description of a matrix}

\item{rule_string}{a string describing a rule}

\item{rules}{rules for progressive enhancement}
}
\description{
\href{http://adventofcode.com/2017/day/21}{Fractal Art}
}
\details{
\strong{Part One}

You find a program trying to generate some art. It uses a strange
process that involves repeatedly enhancing the detail
of an image through a set of rules.

The image consists of a two-dimensional square grid of pixels that are
either on (\code{#}) or off (\code{.}). The program always begins with this
pattern:\preformatted{.#.
..#
###
}

Because the pattern is both \code{3} pixels wide and \code{3} pixels tall, it is
said to have a \emph{size} of \code{3}.

Then, the program repeats the following process:
\itemize{
\item If the size is evenly divisible by \code{2}, break the pixels up into
\code{2x2} squares, and convert each \code{2x2} square into a \code{3x3} square by
following the corresponding \emph{enhancement rule}.
\item Otherwise, the size is evenly divisible by \code{3}; break the pixels up
into \code{3x3} squares, and convert each \code{3x3} square into a \code{4x4}
square by following the corresponding \emph{enhancement rule}.
}

Because each square of pixels is replaced by a larger one, the image
gains pixels and so its \emph{size} increases.

The artist's book of enhancement rules is nearby (your puzzle input);
however, it seems to be missing rules. The artist explains that
sometimes, one must \emph{rotate} or \emph{flip} the input pattern to find a
match. (Never rotate or flip the output pattern, though.) Each pattern
is written concisely: rows are listed as single units, ordered top-down,
and separated by slashes. For example, the following rules correspond to
the adjacent patterns:\preformatted{../.#  =  ..
          .#

                .#.
.#./..#/###  =  ..#
                ###

                        #..#
#..#/..../#..#/.##.  =  ....
                        #..#
                        .##.
}

When searching for a rule to use, rotate and flip the pattern as
necessary. For example, all of the following patterns match the same
rule:\preformatted{.#.   .#.   #..   ###
..#   #..   #.#   ..#
###   ###   ##.   .#.
}

Suppose the book contained the following two rules:\preformatted{../.# => ##./#../...
.#./..#/### => #..#/..../..../#..#
}

As before, the program begins with this pattern:\preformatted{.#.
..#
###
}

The size of the grid (\code{3}) is not divisible by \code{2}, but it is divisible
by \code{3}. It divides evenly into a single square; the square matches the
second rule, which produces:\preformatted{#..#
....
....
#..#
}

The size of this enhanced grid (\code{4}) is evenly divisible by \code{2}, so that
rule is used. It divides evenly into four squares:\preformatted{#.|.#
..|..
--+--
..|..
#.|.#
}

Each of these squares matches the same rule (\code{../.# =&gt; ##./#../...}),
three of which require some flipping and rotation to line up with the
rule. The output for the rule is the same in all four cases:\preformatted{##.|##.
#..|#..
...|...
---+---
##.|##.
#..|#..
...|...
}

Finally, the squares are joined into a new grid:\preformatted{##.##.
#..#..
......
##.##.
#..#..
......
}

Thus, after \code{2} iterations, the grid contains \code{12} pixels that are \emph{on}.

\emph{How many pixels stay on} after \code{5} iterations?

\strong{Part Two}

\emph{How many pixels stay on} after \code{18} iterations?
}
